
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 82, types: 52, coercions: 29, joins: 0/0}

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
unsafeToInteger1 :: forall (n :: Nat). Signed n -> Signed n
[GblId, Arity=1, Unf=OtherCon []]
unsafeToInteger1 = \ (@(n :: Nat)) (ds :: Signed n) -> ds

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
unsafeToInteger :: forall (n :: Nat). Signed n -> Integer
[GblId[[RecSel]], Arity=1, Unf=OtherCon []]
unsafeToInteger
  = unsafeToInteger1
    `cast` (forall (n :: <Nat>_N).
            <Signed n>_R %<Many>_N ->_R OpaqueNoCastWW.N:Signed[0] <n>_P
            :: (forall (n :: Nat). Signed n -> Signed n)
               ~R# (forall (n :: Nat). Signed n -> Integer))

-- RHS size: {terms: 8, types: 7, coercions: 21, joins: 0/0}
times [InlPrag=OPAQUE]
  :: forall (m :: Nat) (n :: Nat).
     Signed m -> Signed n -> Signed (m + n)
[GblId, Arity=2, Unf=OtherCon []]
times
  = (\ (@(m :: Nat))
       (@(n :: Nat))
       (ds :: Signed m)
       (ds1 :: Signed n) ->
       * @Integer
         GHC.Internal.Num.$fNumInteger
         (ds
          `cast` (OpaqueNoCastWW.N:Signed[0] <m>_P :: Signed m ~R# Integer))
         (ds1
          `cast` (OpaqueNoCastWW.N:Signed[0] <n>_P :: Signed n ~R# Integer)))
    `cast` (forall (m :: <Nat>_N) (n :: <Nat>_N).
            <Signed m>_R
            %<Many>_N ->_R <Signed n>_R
            %<Many>_N ->_R Sym (OpaqueNoCastWW.N:Signed[0] <m + n>_P)
            :: (forall (m :: Nat) (n :: Nat). Signed m -> Signed n -> Integer)
               ~R# (forall (m :: Nat) (n :: Nat).
                    Signed m -> Signed n -> Signed (m + n)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
$trModule1 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
$trModule2 = GHC.Types.TrNameS $trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
$trModule3 = "OpaqueNoCastWW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
$trModule4 = GHC.Types.TrNameS $trModule3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
OpaqueNoCastWW.$trModule :: GHC.Types.Module
[GblId, Unf=OtherCon []]
OpaqueNoCastWW.$trModule = GHC.Types.Module $trModule2 $trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1
  = GHC.Types.KindRepTyConApp
      GHC.Num.Integer.$tcInteger (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2
  = GHC.Types.KindRepTyConApp
      GHC.Num.Natural.$tcNatural (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3 = GHC.Types.KindRepFun $krep2 GHC.Types.krep$*

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSigned1 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
$tcSigned1 = "Signed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSigned2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
$tcSigned2 = GHC.Types.TrNameS $tcSigned1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
OpaqueNoCastWW.$tcSigned :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
OpaqueNoCastWW.$tcSigned
  = GHC.Types.TyCon
      12374680438872388605#Word64
      16570143229152367467#Word64
      OpaqueNoCastWW.$trModule
      $tcSigned2
      0#
      $krep3

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4 :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep4
  = GHC.Types.:
      @GHC.Types.KindRep $krep (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep5 = GHC.Types.KindRepTyConApp OpaqueNoCastWW.$tcSigned $krep4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep6 = GHC.Types.KindRepFun $krep1 $krep5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'S1 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
$tc'S1 = "'S"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'S2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
$tc'S2 = GHC.Types.TrNameS $tc'S1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
OpaqueNoCastWW.$tc'S :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
OpaqueNoCastWW.$tc'S
  = GHC.Types.TyCon
      9801584576887380300#Word64
      5757617350287545124#Word64
      OpaqueNoCastWW.$trModule
      $tc'S2
      1#
      $krep6



